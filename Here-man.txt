package io.vlingo.xoomapp;

import io.vlingo.xoom.Boot;
import io.vlingo.actors.Grid;
import io.vlingo.actors.Stage;
import io.vlingo.http.resource.*;
import io.vlingo.cluster.model.Properties;
import io.vlingo.xoom.XoomInitializationAware;
import io.vlingo.xoom.scooter.plugin.mailbox.blocking.BlockingMailboxPlugin;

import io.vlingo.xoomapp.infrastructure.exchange.ExchangeBootstrap;
import io.vlingo.xoomapp.resource.BookResource;
import io.vlingo.xoomapp.resource.AuthorResource;
import io.vlingo.xoomapp.infrastructure.persistence.ProjectionDispatcherProvider;
import io.vlingo.xoomapp.infrastructure.persistence.QueryModelStateStoreProvider;
import io.vlingo.xoomapp.infrastructure.persistence.CommandModelStateStoreProvider;
import io.vlingo.lattice.model.stateful.StatefulTypeRegistry;

import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class XoomInitializer implements XoomInitializationAware {

  private final Grid grid;
  private final Server server;
  private static XoomInitializer instance;

  private XoomInitializer(final String[] args) throws Exception {
    final XoomInitializationAware initializer =
          new AnnotatedBootstrap();

    grid = Boot.start("xoom-app", initializer.parseNodeName(args), initializer.clusterProperties());
    new BlockingMailboxPlugin().start(grid.world());

    initializer.onInit(grid);

    final Configuration serverConfiguration = initializer.configureServer(grid, args);

    final io.vlingo.xoom.exchange.ExchangeInitializer exchangeInitializer = new io.vlingo.xoomapp.infrastructure.exchange.ExchangeBootstrap();
    exchangeInitializer.init(grid);

    final StatefulTypeRegistry statefulTypeRegistry = new StatefulTypeRegistry(grid.world());
    final QueryModelStateStoreProvider queryModelStateStoreProvider = QueryModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry);
    final CommandModelStateStoreProvider commandModelStateStoreProvider = CommandModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry, exchangeInitializer.dispatcher());

    final AuthorResource authorResource = new AuthorResource(grid);
    final BookResource bookResource = new BookResource(grid);

    final Collection<Resource<?>> sseResources = Loader.resourcesFrom(initializer.sseConfiguration()).values();
    final Collection<Resource<?>> feedResources = Loader.resourcesFrom(initializer.feedConfiguration()).values();
    final Collection<Resource<?>> staticResources = Loader.resourcesFrom(initializer.staticFilesConfiguration()).values();
    final Collection<Resource<?>> restResources = Arrays.asList(
              authorResource.routes(),
              bookResource.routes()
    );

    final Resource[] resources =
            Stream.of(sseResources, feedResources, staticResources, restResources)
                    .flatMap(Collection::stream).collect(Collectors.toList())
                    .toArray(new Resource<?>[]{});


    server = Server.startWith(grid.world().stage(), Resources.are(resources), serverConfiguration.port(), serverConfiguration.sizing(), serverConfiguration.timing());

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
         if (instance != null) {
        instance.server.stop();
        System.out.println("=========================");
        System.out.println("Stopping xoom-app.");
        System.out.println("=========================");
        }
    }));
  }

  public void onInit(final Grid grid) {
  }

  public static void main(final String[] args) throws Exception {
    System.out.println("=========================");
    System.out.println("service: xoom-app.");
    System.out.println("=========================");
    instance = new XoomInitializer(args);
  }

  public static XoomInitializer instance() {
    return instance;
  }

  public Server server() {
    return server;
  }

  public void stopServer() throws Exception {
    if (instance == null) {
      throw new IllegalStateException("xoom-app server not running");
    }
    instance.server.stop();
    instance.grid.world().terminate();
  }
}
