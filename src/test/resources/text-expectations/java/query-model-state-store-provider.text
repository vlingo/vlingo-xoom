package io.vlingo.infrastructure.persistence;

import java.util.Arrays;

import io.vlingo.xoomapp.infrastructure.AuthorData;
import io.vlingo.xoomapp.infrastructure.BookData;

import io.vlingo.actors.Stage;
import io.vlingo.symbio.store.state.StateTypeStateStoreMap;
import io.vlingo.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.symbio.EntryAdapterProvider;
import io.vlingo.symbio.store.dispatch.Dispatcher;
import io.vlingo.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.symbio.store.state.StateStore;
import io.vlingo.xoom.actors.Settings;
import io.vlingo.xoom.storage.Model;
import io.vlingo.xoom.storage.StoreActorBuilder;
import io.vlingo.xoom.annotation.persistence.Persistence.StorageType;

@SuppressWarnings("ALL")
public class QueryModelStateStoreProvider {
  private static QueryModelStateStoreProvider instance;

  public final StateStore store;
  public final BookQueries bookQueries;
  public final AuthorQueries authorQueries;

  public static QueryModelStateStoreProvider instance() {
    return instance;
  }

  public static QueryModelStateStoreProvider using(final Stage stage, final StatefulTypeRegistry registry) {
    return using(stage, registry, new NoOpDispatcher());
  }

  public static QueryModelStateStoreProvider using(final Stage stage, final StatefulTypeRegistry registry, final Dispatcher ...dispatchers) {
    if (instance != null) {
      return instance;
    }

    new EntryAdapterProvider(stage.world()); // future use

    StateTypeStateStoreMap.stateTypeToStoreName(AuthorData.class, AuthorData.class.getSimpleName());
    StateTypeStateStoreMap.stateTypeToStoreName(BookData.class, BookData.class.getSimpleName());

    final StateStore store =
            StoreActorBuilder.from(stage, Model.QUERY, Arrays.asList(dispatchers), StorageType.STATE_STORE, Settings.properties(), true);


    instance = new QueryModelStateStoreProvider(stage, store);

    return instance;
  }

  private QueryModelStateStoreProvider(final Stage stage, final StateStore store) {
    this.store = store;
    this.bookQueries = stage.actorFor(BookQueries.class, BookQueriesActor.class, store);
    this.authorQueries = stage.actorFor(AuthorQueries.class, AuthorQueriesActor.class, store);
  }
}
