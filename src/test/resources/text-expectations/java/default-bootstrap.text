package io.vlingo.xoomapp.infrastructure;

import io.vlingo.xoomapp.infrastructure.exchange.ExchangeBootstrap;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoomapp.resource.BookResource;
import io.vlingo.xoomapp.resource.AuthorResource;
import io.vlingo.xoomapp.infrastructure.persistence.ProjectionDispatcherProvider;
import io.vlingo.xoomapp.infrastructure.persistence.QueryModelStateStoreProvider;
import io.vlingo.xoomapp.infrastructure.persistence.CommandModelStateStoreProvider;

import io.vlingo.xoom.turbo.Boot;
import io.vlingo.xoom.lattice.grid.Grid;
import io.vlingo.xoom.http.resource.Configuration.Sizing;
import io.vlingo.xoom.http.resource.Configuration.Timing;
import io.vlingo.xoom.http.resource.Resources;
import io.vlingo.xoom.http.resource.Server;
import io.vlingo.xoom.turbo.exchange.ExchangeInitializer;

@SuppressWarnings("all")
public class Bootstrap {

  private final Grid grid;
  private final Server server;
  private static Bootstrap instance;

  public Bootstrap(final String nodeName) throws Exception {
    grid = Boot.start("xoom-app", nodeName);

    final ExchangeInitializer exchangeInitializer = new ExchangeBootstrap();
    exchangeInitializer.init(grid);

    final StatefulTypeRegistry statefulTypeRegistry = new StatefulTypeRegistry(grid.world());
    QueryModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry);
    CommandModelStateStoreProvider.using(grid.world().stage(), statefulTypeRegistry, ProjectionDispatcherProvider.using(grid.world().stage()).storeDispatcher, exchangeInitializer.dispatcher());

    final AuthorResource authorResource = new AuthorResource(grid);
    final BookResource bookResource = new BookResource(grid);

    Resources allResources = Resources.are(
        authorResource.routes(),
        bookResource.routes()
    );

    server = Server.startWith(grid.world().stage(), allResources, Boot.serverPort(), Sizing.define(), Timing.define());

    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      if (instance != null) {
        instance.server.stop();

        System.out.println("\n");
        System.out.println("=========================");
        System.out.println("Stopping xoom-app.");
        System.out.println("=========================");
      }
    }));
  }

  public void stopServer() {
    if (instance == null) {
      throw new IllegalStateException("xoom-app server not running");
    }
    instance.server.stop();
  }

  public Grid grid() {
    return grid;
  }

  public static void main(final String[] args) throws Exception {
    System.out.println("=========================");
    System.out.println("service: xoom-app.");
    System.out.println("=========================");

    instance = new Bootstrap(parseNodeName(args));
  }

  private static String parseNodeName(final String[] args) {
    if (args.length == 0) {
        return null;
    } else if (args.length > 1) {
        System.out.println("Too many arguments; provide node name only.");
        System.exit(1);
    }
    return args[0];
  }
}
