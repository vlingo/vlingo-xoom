package io.vlingo.xoomapp.infrastructure.resource;

import io.vlingo.xoom.actors.Definition;
import io.vlingo.xoom.actors.Address;
import io.vlingo.xoom.actors.Grid;
import io.vlingo.xoom.common.Completes;
import io.vlingo.xoom.http.ContentType;
import io.vlingo.xoom.http.Response;
import io.vlingo.xoom.http.ResponseHeader;
import io.vlingo.xoom.http.resource.Resource;
import io.vlingo.xoom.http.resource.DynamicResourceHandler;
import io.vlingo.xoomapp.model.author.AuthorEntity;
import io.vlingo.xoomapp.infrastructure.AuthorData;
import io.vlingo.xoomapp.model.author.Author;
import io.vlingo.xoomapp.infrastructure.persistence.AuthorQueries;
import io.vlingo.xoomapp.infrastructure.persistence.QueryModelStateStoreProvider;
import io.vlingo.xoomapp.model.*;

import static io.vlingo.xoom.common.serialization.JsonSerialization.serialized;
import static io.vlingo.xoom.http.Response.Status.*;
import static io.vlingo.xoom.http.ResponseHeader.Location;
import static io.vlingo.xoom.http.resource.ResourceBuilder.resource;

/**
 * See <a href="https://docs.vlingo.io/xoom-turbo/xoom-annotations#resourcehandlers">@ResourceHandlers</a>
 */
public class AuthorResource extends DynamicResourceHandler {
  private final Grid grid;
  private final AuthorQueries $queries;

  public AuthorResource(final Grid grid) {
      super(grid.world().stage());
      this.grid = grid;
      this.$queries = QueryModelStateStoreProvider.instance().authorQueries;
  }

  public Completes<Response> withName(final AuthorData data) {
    final Name name = Name.from(data.name.firstName, data.name.lastName);
    return Author.withName(grid, name)
      .andThenTo(state -> Completes.withSuccess(entityResponseOf(Created, ResponseHeader.headers(ResponseHeader.of(Location, location(state.id))), serialized(AuthorData.from(state))))
      .otherwise(arg -> Response.of(NotFound))
      .recoverFrom(e -> Response.of(InternalServerError, e.getMessage())));
  }

  public Completes<Response> changeRank(final String id, final AuthorData data) {
    final Classifier classifier = Classifier.from(data.rank.classification.classifier.name);
    final Classification classification = Classification.from(data.rank.classification.label, classifier);
    final Rank rank = Rank.from(data.rank.points, classification);
    return resolve(id)
            .andThenTo(author -> author.changeRank(rank))
            .andThenTo(state -> Completes.withSuccess(entityResponseOf(Ok, serialized(AuthorData.from(state)))))
            .otherwise(noGreeting -> Response.of(NotFound))
            .recoverFrom(e -> Response.of(InternalServerError, e.getMessage()));
  }

  public Completes<Response> authors() {
    return $queries.authors()
            .andThenTo(data -> Completes.withSuccess(entityResponseOf(Ok, serialized(data))))
            .otherwise(arg -> Response.of(NotFound))
            .recoverFrom(e -> Response.of(InternalServerError, e.getMessage()));
  }

  public Completes<Response> authorOf(final String id) {
    return $queries.authorOf(id)
            .andThenTo(data -> Completes.withSuccess(entityResponseOf(Ok, serialized(data))))
            .otherwise(arg -> Response.of(NotFound))
            .recoverFrom(e -> Response.of(InternalServerError, e.getMessage()));
  }

  @Override
  public Resource<?> routes() {
     return resource("AuthorResource",
        io.vlingo.xoom.http.resource.ResourceBuilder.post("/authors/")
            .body(AuthorData.class)
            .handle(this::withName),
        io.vlingo.xoom.http.resource.ResourceBuilder.patch("/authors/{id}/rank")
            .param(String.class)
            .body(AuthorData.class)
            .handle(this::changeRank),
        io.vlingo.xoom.http.resource.ResourceBuilder.get("/authors")
            .handle(this::authors),
        io.vlingo.xoom.http.resource.ResourceBuilder.get("/authors/{id}")
            .param(String.class)
            .handle(this::authorOf)
     );
  }

  @Override
  protected ContentType contentType() {
    return ContentType.of("application/json", "charset=UTF-8");
  }

  private String location(final String id) {
    return "/authors/" + id;
  }

  private Completes<Author> resolve(final String id) {
    final Address address = grid.addressFactory().from(id);
    return grid.actorOf(Author.class, address, Definition.has(AuthorEntity.class, Definition.parameters(id)));
  }

}
